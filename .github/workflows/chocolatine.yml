name: chocolatine

on:
  push:
    branches-ignore:
    - "ga-ignore-*"
  pull_request:
    branches-ignore:
    - "ga-ignore-*"

env:
  SOURCE: Harleen-sk/test_choco
  MIRROR_URL: EpitechPromo2027/B-DOP-200-PAR-2-1-chocolatine-harleen.singh-kaur
  EXECUTABLE: "choco"
  GITHUB_SSH_KEY: ${{ secrets.GIT_SSH_PRIVATE_KEY }}
  BASH_CHECKER: check_results_v3.sh
  RUN_IN_EPITEST: run_in_epitest.sh
  CHECK_IF_PRESENT: check_if_present_v2.sh
  CHECK_IF_EXECUTABLE: check_if_executable_v1.sh
  CODING_STYLE_CHECKER: check.sh


jobs:

  check_coding_style:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: assign execution rights to $CODING_STYLE_CHECKER
      run: chmod +x ./$CODING_STYLE_CHECKER
    - name: run $CODING_STYLE_CHECKER
      run: ./$CODING_STYLE_CHECKER
    - name: checking the results
      run: |
        ls -lsa
        chmod +x ./$BASH_CHECKER
        ./$BASH_CHECKER && exit $? || exit 1

  check_program_compilation:
    runs-on: ubuntu-latest
    needs: check_coding_style
    if: success()
    timeout-minutes: 2
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Pull Docker image
      run: sudo docker pull epitechcontent/epitest-docker
    - name: compile code
      run: |
        chmod +x ./$RUN_IN_EPITEST
        ./$RUN_IN_EPITEST "make && exit $? || exit 1"
    - name: clean code
      run: |
        chmod +x ./$RUN_IN_EPITEST
        ./$RUN_IN_EPITEST "make clean && exit $? || exit 1"
    - name: chek if present
      run: |
        IFS=',' read -ra VARS <<< "${EXECUTABLE}"
        chmod +x ./$RUN_IN_EPITEST
        echo ${VARS[@]}
        ls -lsa
        ./$RUN_IN_EPITEST "chmod +x ./${CHECK_IF_PRESENT} ${VARS[@]} && exit $? || exit 1"
    - name: check if executable
      run: |
        IFS=',' read -ra VARS <<< "${EXECUTABLE}"
        chmod +x ./$RUN_IN_EPITEST
        ./$RUN_IN_EPITEST "chmod +x ./${CHECK_IF_EXECUTABLE} && ./${CHECK_IF_EXUCUTABLE} ${VARS[@]} && exit 1"

  run_tests:
    runs-on: ubuntu-latest
    needs: check_program_compilation
    if: success()
    timeout-minutes: 2
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: run_tests
      run: |
        chmod +x ./$RUN_IN_EPITEST
        ./$RUN_IN_EPITEST "make tests_run && exit $? || exit 1"

  push_to_mirror:
    runs-on: ubuntu-latest
    needs: run_tests
    if: success()
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Push the content to the mirror repository
      uses: pixta-dev/repository-mirroring-action@v1
      with:
        target_repo_url: git@github.com:${{ env.MIRROR_URL }}.git
        ssh_private_key: ${{ env.GITHUB_SSH_KEY }}


